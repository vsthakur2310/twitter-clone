{"version":3,"sources":["SidebarOption.js","Sidebar.js","firebase.js","Tweetbox.js","Post.js","Feed.js","Widgets.js","App.js","serviceWorker.js","index.js"],"names":["SidebarOption","active","text","Icon","className","Sidebar","HomeIcon","SearchIcon","NotificationsIcon","MailOutlineIcon","BookmarkBorderIcon","ListAltIcon","PermIdentityIcon","MoreHorizIcon","Button","variant","fullWidth","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Tweetbox","useState","tweetMessage","setTweetMessage","tweetImage","setTweetImage","Avatar","src","onChange","e","target","value","placeholder","type","onClick","preventDefault","collection","add","displayName","username","verified","image","avatar","Post","forwardRef","ref","alt","fontSize","Feed","posts","setPosts","useEffect","onSnapshot","snapshot","docs","map","doc","data","post","key","Widgets","tweetId","options","theme","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e3907f56.chunk.js","sourcesContent":["import React from 'react'\r\nimport './SidebarOption.css';\r\n\r\nfunction SidebarOption({ active, text, Icon }) {\r\n    return (\r\n        <div className={`sidebarOption ${active && `sidebarOption--active`}`}>\r\n          <Icon />\r\n          <h2>{text}</h2>  \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SidebarOption\r\n ","import React from 'react';\r\nimport './Sidebar.css';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport SidebarOption from \"./SidebarOption\";\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport MailOutlineIcon from '@material-ui/icons/MailOutline';\r\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\r\nimport ListAltIcon from '@material-ui/icons/ListAlt';\r\nimport PermIdentityIcon from '@material-ui/icons/PermIdentity';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport {Button} from \"@material-ui/core\"\r\n\r\nfunction Sidebar() {\r\n    return (\r\n        <div className=\"sidebar\">\r\n            {/* Twitter Icon */}\r\n            <TwitterIcon className=\"sidebar_twittericon\"/>\r\n          \r\n            <SidebarOption active Icon ={HomeIcon} text=\"Home\"/>\r\n            <SidebarOption Icon ={SearchIcon} text=\"Explore\"/>\r\n            <SidebarOption Icon ={NotificationsIcon} text=\"Notifications\"/>\r\n            <SidebarOption Icon ={MailOutlineIcon} text=\"Messages\"/>\r\n            <SidebarOption Icon ={BookmarkBorderIcon} text=\"Bookmarks\"/>\r\n            <SidebarOption Icon ={ListAltIcon} text=\"Lists\"/>\r\n            <SidebarOption Icon ={PermIdentityIcon} text=\"Profile\"/>\r\n            <SidebarOption Icon ={MoreHorizIcon} text=\"More\"/>\r\n\r\n            {/* Button -> Tweet */}\r\n            <Button variant=\"outlined\" className=\"sidebar_tweet\" fullWidth>Tweet</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyCth6PUOC6OztasCWzFvBf-x7j97iT9jyQ\",\r\n    authDomain: \"twitter-clone-e2812.firebaseapp.com\",\r\n    databaseURL: \"https://twitter-clone-e2812.firebaseio.com\",\r\n    projectId: \"twitter-clone-e2812\",\r\n    storageBucket: \"twitter-clone-e2812.appspot.com\",\r\n    messagingSenderId: \"610035071691\",\r\n    appId: \"1:610035071691:web:c3a21263a2dccc5622b94e\",\r\n    measurementId: \"G-B7MC7G18CZ\"\r\n  };\r\n\r\n  const firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\n  const db = firebaseApp.firestore();\r\n\r\n  export default db;","import React, { useState } from 'react';\r\nimport \"./Tweetbox.css\";\r\nimport { Avatar, Button } from \"@material-ui/core\";\r\nimport db from './firebase'\r\n\r\nfunction Tweetbox() {\r\n    const[tweetMessage, setTweetMessage] = useState(''); \r\n    const[tweetImage, setTweetImage] = useState('');  \r\n    \r\n    const sendTweet = (e) => {\r\n        e.preventDefault();\r\n\r\n        db.collection('posts').add({\r\n            displayName: \"V.S. Thakur\",\r\n            username: \"vsthakur\",\r\n            verified: true,\r\n            text: tweetMessage,\r\n            image: tweetImage,\r\n            avatar:\"https://pbs.twimg.com/profile_images/1281136782268981248/M0r_wAZZ_400x400.jpg\"\r\n\r\n        });\r\n\r\n        setTweetImage(\"\");\r\n        setTweetMessage(\"\");\r\n    };\r\n    \r\n    return (\r\n        <div className=\"tweetBox\">\r\n        <form>\r\n            <div className=\"tweetBox_input\">\r\n            <Avatar src=\"https://pbs.twimg.com/profile_images/1281136782268981248/M0r_wAZZ_400x400.jpg\"></Avatar>\r\n            <input \r\n            onChange={(e) => setTweetMessage(e.target.value)}\r\n            value={tweetMessage} \r\n            placeholder=\"What's happening?\" \r\n            type=\"text\"/>\r\n            </div>\r\n            \r\n            <input className=\"tweetBox_imageInput\"\r\n            onChange={(e) => setTweetImage(e.target.value)}\r\n            value={tweetImage}\r\n            placeholder=\"Optional: Enter Image URL\" \r\n            type=\"text\"/>\r\n            \r\n            \r\n            <Button onClick={sendTweet} type=\"submit\" >Tweet</Button>\r\n        </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tweetbox\r\n","import React, {forwardRef} from 'react'\r\nimport './Post.css'\r\nimport { Avatar} from \"@material-ui/core\";\r\nimport VerifiedUserIcon from '@material-ui/icons/VerifiedUser';\r\nimport ChatBubbleOutlineIcon from '@material-ui/icons/ChatBubbleOutline';\r\nimport RepeatIcon from '@material-ui/icons/Repeat';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\n\r\nconst Post = forwardRef(\r\n    ({ displayName, username, verified, text, image, avatar }, ref) => {\r\n    return (\r\n        <div className=\"post\" ref={ref}>\r\n            <div className=\"post_avatar\">\r\n                <Avatar src={avatar}/>\r\n\r\n            </div>\r\n            <div className=\"post_body\">\r\n                <div className=\"post_header\">\r\n                    <div className=\"post_headerText\">\r\n                        <h3>\r\n                            {displayName}\r\n                            <span className=\"username\">\r\n                                {verified && <VerifiedUserIcon className=\"post_badge\"/>}\r\n                                @{username}\r\n                            </span>\r\n                        </h3>\r\n                    </div>\r\n                    <div className=\"post_description\">\r\n                        <p>{text}</p>\r\n                    </div>\r\n                </div>\r\n                    <div className=\"after_header\">\r\n                        <img src={image} alt=\"\"/>\r\n                        <div className=\"post_footer\">\r\n                            <ChatBubbleOutlineIcon fontSize=\"small\"/>\r\n                            <RepeatIcon fontSize=\"small\"/>\r\n                            <FavoriteBorderIcon fontSize=\"small\"/>\r\n                            <PublishIcon fontSize=\"small\"/>\r\n                        </div>\r\n                    </div>\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default Post\r\n","import React, { useState, useEffect }from 'react'\r\nimport './Feed.css'\r\nimport Tweetbox from './Tweetbox';\r\nimport Post from './Post';\r\nimport db from \"./firebase\";\r\nimport FlipMove from 'react-flip-move';\r\n\r\nfunction Feed() {\r\n    const [posts, setPosts] = useState([]);\r\n    \r\n    useEffect(() => {\r\n        db.collection('posts').onSnapshot(snapshot => (setPosts(snapshot.docs.map(doc => doc.data()))\r\n        ))\r\n    }, []);\r\n    \r\n    \r\n    return (\r\n        <div className=\"feed\">\r\n            {/* Header */}\r\n            <div className=\"feed_header\">\r\n                <h2>Home</h2>\r\n            </div>\r\n            \r\n            {/* TweetBox/ */}\r\n            <Tweetbox />\r\n            \r\n            {/* Post */}\r\n            <FlipMove>\r\n            {posts.map(post => (\r\n            <Post \r\n            key= {post.text}\r\n            displayName={post.displayName}\r\n            username={post.username}\r\n            verified={post.verified}\r\n            text={post.text}\r\n            image={post.image}\r\n            avatar={post.avatar}\r\n            \r\n            />\r\n            ))}\r\n            </FlipMove>\r\n            {/* Post */}\r\n            {/* Post */}\r\n            {/* Post */}\r\n            {/* Post */}\r\n            {/* Post */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Feed\r\n","import React from 'react'\r\nimport './Widgets.css'\r\nimport { TwitterTweetEmbed } from \"react-twitter-embed\";\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nfunction Widgets() {\r\n    return (\r\n        <div className=\"widgets\">\r\n            <div className=\"widgets_input\">\r\n                <SearchIcon className=\"widgets_searchIcon\"/>\r\n                <input placeholder=\"Search Twitter\" type=\"text\" />\r\n            </div>\r\n\r\n            <div className=\"widgets_widgetContainer\">\r\n                <h2>What's happening</h2>\r\n\r\n                <TwitterTweetEmbed  tweetId ={\"1298858283852234752\"} \r\n                options={{theme: 'dark'}}\r\n                />\r\n\r\n                {/* <TwitterTimelineEmbed \r\n                   sourceType=\"profile\"\r\n                  screenName=\"elonmusk\"\r\n                 options={{ height: 330 , theme: 'dark' }}\r\n                /> */}\r\n            </div>\r\n\r\n            <div className=\"widgets_widgetContainer\">\r\n             <p>\"Hey yo! You can actually make a tweet, so just go ahead and post whatever tf u want, also paste an image URL if you feel like attaching an image along with your tweet\"</p>\r\n             <br></br>\r\n             <p>PS: Feed is scrollable </p>\r\n            </div>\r\n\r\n            <div className=\"widgets_widgetContainer\">\r\n             <p>-V.S.Thakur</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Widgets\r\n","import React from 'react';\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport Feed from './Feed';\nimport Widgets from './Widgets';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* Sidebar */}\n      <Sidebar />\n     \n      {/* Feed */}\n      <Feed />\n\n      {/* Widgets */}\n      <Widgets />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}